{"version":3,"sources":["Components/CartTotal/CartTotal.js","Components/Header/Header.js","Redux/product.js","Components/Product/Product.js","Helper/Loadspinner.js","Components/Home/Home.js","App.js","app/store.js","serviceWorker.js","index.js","Redux/counter.js","Components/CartTotal/Cart/Cart.js","Redux/basket.js"],"names":["CartTotal","basket1","useSelector","basket","className","length","map","item","Cart","key","id","name","image","to","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","overflow","backgroundColor","palette","background","border","boxShadow","shadows","marginLeft","height","margin","padding","outline","Header","classes","count1","count","useState","status","setStatus","modalStyle","Modal","open","onClose","aria-labelledby","aria-describedby","style","onClick","productSlice","createSlice","initialState","products","reducers","selectOnCategory","state","action","res1","payload","data","filter","res2","category","actions","selectProduct","product","Product","dispatch","useDispatch","src","alt","find","res","console","log","indexRes","findIndex","increaseQuantity","increaseCount","addToCart","quantity","LoadingIndicator","props","usePromiseTracker","delay","promiseInProgress","display","justifyContent","alignItems","type","color","Home","setCategory","useEffect","a","trackPromise","axios","get","then","displayProduct","value","e","target","_id","Checkout","React","lazy","App","path","fallback","rootStore","configureStore","reducer","basketSlice","counter","counterSlice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","decreaseCount","decreaseCountOnId","quantity1","removeItem","deleteFromCart","decreaseQuantity","baskets","push"],"mappings":"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","file":"static/js/main.3afa9abf.chunk.js","sourcesContent":["import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Cart from './Cart/Cart'\nimport {basket} from '../../Redux/basket'\nimport './CartTotal.css'\nimport {Link} from 'react-router-dom'\n//cart model page\n\nfunction CartTotal() {\n    const basket1=useSelector(basket)\n  \n    return (\n        <div className=\"cartTotal\">\n          {basket1.length===0?<h2> Cart is empty :(</h2>:(\n              <div className=\"cartBasket\"> \n                {\n                    basket1.map((item)=>\n               {\n                   \n                return ( <Cart\n               key={item.id}\n                id={item.id}\n                name={item.name} \n                image={item.image}\n                />)}\n                )}\n                <Link to={basket1.length>0?\"/checkout\":\"/\"}>\n                <button className=\"cart-button\"  >Checkout</button>\n                </Link>\n                </div>\n            \n          )\n                }\n        </div>\n    )\n}\n\nexport default CartTotal\n","import React, { useState } from 'react'\nimport './Header.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport CartTotal from '../CartTotal/CartTotal'\nimport { useSelector } from 'react-redux'\nimport Modal from '@material-ui/core/Modal';\nimport { count } from '../../Redux/counter'\n\nfunction getModalStyle() {\n    const top = '50px';\n    const left = 80;\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 450,\n        overflow: 'scroll',\n\n        backgroundColor: theme.palette.background.paper,\n        border: 'none',\n        boxShadow: theme.shadows[5],\n        marginLeft: '-10px',\n        height: '300px',\n        margin: 'none',\n        // paddingLeft: '-10px',\n        padding:'10px',\n        outline: '0'\n\n    },\n}));\n\n\nconst Header = () => {\n    const classes = useStyles()\n\n    const count1 = useSelector(count)\n    const [status, setStatus] = useState(false)\n    const [modalStyle] = useState(getModalStyle);\n\n\n\n    return (\n\n\n        <div className=\"Header-main\">\n            <Modal\n                open={status}\n                onClose={() => setStatus(false)}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                <div style={modalStyle} className={classes.paper}>\n\n                    <CartTotal />\n                </div>\n\n            </Modal>\n            <h2 className=\"Header-title\">\n                Shop\n            </h2>\n\n            <div className=\"Header-right\">\n                <div>\n                    <p className=\"cartCount\">{count1}</p>\n                    <button onClick={() => setStatus(!status)} className=\"Header-button\">\n                        cart\n                    </button>\n                </div>\n                <button className=\"Header-Avatar\"></button>\n                <h4 className=\"Header-username\">\n                    UseName\n                 </h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import { createSlice } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { trackPromise } from 'react-promise-tracker';\n\n\n\n\n\n//state for the  type of category to be displayed\nexport const productSlice = createSlice({\n    name: 'product',\n    initialState: {\n        products: []\n    },\n    reducers: {\n        selectOnCategory: (state, action) => {\n            // console.log(action)\n            let res = action.payload.data\n            let res1 = res.filter((res2) =>\n                res2.category === action.payload.category\n            )\n            state.products = res1\n            // console.log(state.products)\n        }\n    }\n})\n\n\nexport const { selectOnCategory } = productSlice.actions\n\nexport const displayProduct = category => async dispatch => {\n    // console.log(\"jjj\")\n    trackPromise(axios.get('https://check-app-deploy.herokuapp.com/products').then((res) => dispatch(selectOnCategory({ data: res.data, category: category }))\n\n    ))\n\n}\n\nexport const selectProduct = state => state.product.products\n\nexport default productSlice.reducer","import React from 'react'\nimport './Product.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addToCart, basket, increaseQuantity } from '../../Redux/basket'\nimport { increaseCount } from '../../Redux/counter'\n\nfunction Product({ id, image, name }) {\n    const dispatch = useDispatch()\n    const basket1 = useSelector(basket)\n\n    //add item to the cart \n    const addItems = () => {\n        let exist = basket1.find((res) => {\n            if (res.id === id) {\n                console.log(res.id,id)\n\n                return true\n            }\n            else return false\n        }\n        )\n        if (!exist) {\n            dispatch(\n                //adding item to cart\n                addToCart({\n                    id: id, image: image, name: name, quantity: 1\n                })\n            )\n                //increase cart count\n                dispatch(\n                increaseCount()\n            )\n        }\n        else {\n            let indexRes = basket1.findIndex((res) => res.id === id)\n            //increase count of quantity of the product\n            dispatch(increaseQuantity({ indexRes }))\n            dispatch(\n                //increase cart count\n                increaseCount()\n            )\n            return\n\n        }\n        return\n    }\n    return (\n        <div className=\"Product-container\">\n            <img className=\"product_image\" src={image} alt={id} />\n            <p>{name}</p>\n            <button onClick={addItems}>Add to Cart</button>\n        </div>\n    )\n}\n\nexport default Product\n","import React from 'react'\nimport Loader from 'react-loader-spinner';\nimport { usePromiseTracker } from \"react-promise-tracker\";\n\n\nconst LoadingIndicator = props => {\n  const { promiseInProgress } = usePromiseTracker({delay: 500});\n\n  return promiseInProgress && \n   <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Loader type=\"TailSpin\"  color=\"gray\" height=\"20%\" width=\"20%\" />\n    </div>\n};\n\nexport default LoadingIndicator","import React, { useEffect, useState } from 'react'\nimport './Home.css'\nimport { selectProduct, displayProduct } from '../../Redux/product'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Product from '../Product/Product'\nimport LoaderSpinner from '../../Helper/Loadspinner'\n\n\n\nfunction Home() {\n    const dispatch = useDispatch();\n    const product = useSelector(selectProduct)\n    const [category, setCategory] = useState('Pant')\n\n    useEffect(() => {\n        dispatch(displayProduct(category))\n\n    }, [category])\n\n\n    return (\n        <div className=\"Home-container\">\n            <div className=\"Home-category\">\n                <button value=\"Pant\" onClick={(e) => setCategory(e.target.value)}>Pant</button>\n                <button value=\"Shirt\" onClick={(e) => setCategory(e.target.value)}>Shirt</button>\n                <button value=\"Shoe\" onClick={(e) => setCategory(e.target.value)}>Shoes</button>\n            </div>\n            <div className=\"Home-right\">\n\n                <h2 className=\"header\">Products under the category {category}</h2>\n                <LoaderSpinner/>\n                <div className=\"Home-products\">\n\n                    {\n                        product.map((item) => {\n                            return (\n                                <Product\n                                    key={item._id}\n                                    id={item._id}\n                                    image={item.image}\n                                    name={item.name}\n                                />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Header from './Components/Header/Header'\r\nimport Home from './Components/Home/Home'\r\n\r\nconst Checkout = React.lazy(() => import('./Components/Checkout/Checkout'))\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/checkout\">\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Checkout/>\r\n          </Suspense>\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Header />\r\n            <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport productSlice from '../Redux/product'\r\nimport basketSlice from '../Redux/basket'\r\nimport counterSlice from '../Redux/counter'\r\n\r\nexport const rootStore=configureStore({\r\n    reducer:{\r\n            product:productSlice,\r\n            basket:basketSlice,\r\n            counter:counterSlice\r\n\r\n    }\r\n})","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {rootStore as store} from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />,\r\n\r\n    </Provider>,\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createSlice } from '@reduxjs/toolkit'\n\n\n\nexport const counterSlice = createSlice({\n    name: 'count',\n    initialState: {\n        count: 0\n    },\n    reducers: {\n        increaseCount: (state) => {\n            state.count += 1\n        },\n        decreaseCount: (state) => {\n            state.count -= 1\n        },\n        decreaseCountOnId: (state, action) => {\n\n\n            state.count = state.count - action.payload\n        }\n    }\n\n});\n\nexport const { increaseCount, decreaseCount, decreaseCountOnId } = counterSlice.actions\n\nexport const count = state => state.counter.count\n\n// export const selectProduct=state=>state.product.products\n\n\nexport default counterSlice.reducer","import React from 'react'\nimport './Cart.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteFromCart, basket, increaseQuantity, decreaseQuantity } from '../../../Redux/basket'\nimport {increaseCount,decreaseCount,decreaseCountOnId} from '../../../Redux/counter'\n//induvidual cart item\n\nfunction Cart({ id, image, name }) {\n    const dispatch = useDispatch()\n    const basket1 = useSelector(basket)\n\n\n    let indexRes = basket1.findIndex((res) => res.id === id)\n\n\n    const quantity1 = basket1[indexRes].quantity\n\n\n\n    const removeItem = () => {\n        let indexRes = basket1.findIndex((res) => res.id === id)\n        let res = basket1[indexRes].quantity\n        console.log(res)\n\n        dispatch(deleteFromCart({\n            id: id\n        }))\n        dispatch(\n            decreaseCountOnId(res)\n        )\n\n\n    }\n\n    //increment count for product and cart\n    const incrementQuantity = () => {\n        let indexRes = basket1.findIndex((res) => res.id === id)\n        dispatch(increaseQuantity({ indexRes }))\n\n        dispatch(\n            increaseCount()\n        )\n    }\n\n\n    const decrementQuantity = () => {\n        let indexRes = basket1.findIndex((res) => res.id === id)\n\n        if (basket1[indexRes].quantity !== 1) {\n            dispatch(decreaseQuantity({ indexRes }))\n            dispatch(\n                decreaseCount()\n            )\n        }\n        else {\n            removeItem()\n\n        }\n\n    }\n\n    return (\n        \n        <div className=\"Cart-container\">\n            <img className=\"Cart_image\" src={image} alt=\"product-image1\"/>\n            <div className=\"rightContainer\">\n            <p>{name}</p>\n            <div className=\"quantity-container-main\">\n                <p>quantity: </p>\n                <div className=\"quantity-container\">\n                    <p className=\"arrow-up\" onClick={incrementQuantity}></p>\n                    <p className=\"quantity\"> {quantity1}</p>\n                    <p className=\"arrow-down\" onClick={decrementQuantity}></p>\n                </div>\n            </div>\n            </div>\n\n            <button className=\"remove_button\"onClick={removeItem}>Remove from cart</button>\n        </div>\n    )\n}\n\nexport default Cart\n","import { createSlice } from '@reduxjs/toolkit'\n\n\nexport const basketSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        baskets: []\n    },\n    reducers: {\n        addToCart: (state, action) => {\n            console.log(state.baskets)\n            state.baskets.push(action.payload)\n            console.log(action)\n        },\n        deleteFromCart: (state, action) => {\n            state.baskets = state.baskets.filter((res) => res.id !== action.payload.id)\n\n        },\n        increaseQuantity: (state, action) => {\n            console.log(action)\n            let res = action.payload.indexRes\n            state.baskets[res].quantity += 1\n        },\n        decreaseQuantity: (state, action) => {\n            let res = action.payload.indexRes\n            state.baskets[res].quantity -= 1\n        },\n    }\n\n});\n\nexport const { addToCart, deleteFromCart, increaseCount, increaseQuantity, decreaseQuantity, decreaseCount, decreaseCountOnId } = basketSlice.actions\n\nexport const basket = state => state.basket.baskets\n// export const count=state=>state.basket.count\n\n// export const selectProduct=state=>state.product.products\n\n\nexport default basketSlice.reducer"],"sourceRoot":""}